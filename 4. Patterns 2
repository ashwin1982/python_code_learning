Problem 1:

Code : Inverted Number Pattern
Send Feedback
Print the following pattern for the given N number of rows.
Pattern for N = 4
4444
333
22
1
Input format :
Integer N (Total no. of rows)
Output format :
Pattern in N lines
Constraints :
0 <= N <= 50
Sample Input 1:
5
Sample Output 1:
55555 
4444
333
22
1
Sample Input 2:
6
Sample Output 2:
666666
55555 
4444
333
22
1

Soln:

Code : Inverted Number Pattern
Send Feedback
Print the following pattern for the given N number of rows.
Pattern for N = 4
4444
333
22
1
Input format :
Integer N (Total no. of rows)
Output format :
Pattern in N lines
Constraints :
0 <= N <= 50
Sample Input 1:
5
Sample Output 1:
55555 
4444
333
22
1
Sample Input 2:
6
Sample Output 2:
666666
55555 
4444
333
22
1

Problem 2:

Code : Mirror Number Pattern
Send Feedback
Print the following pattern for the given N number of rows.
Pattern for N = 4




The dots represent spaces.



Input format :
Integer N (Total no. of rows)
Output format :
Pattern in N lines
Constraints
0 <= N <= 50
Sample Input 1:
3
Sample Output 1:
      1 
    12
  123
Sample Input 2:
4
Sample Output 2:
      1 
    12
  123
1234

Soln:

n = int(input())
currrow=1
while (currrow<=n):
    currcol=1
    spaces=1
    while (spaces<=n-currrow):
        print(" ",end="")
        spaces+=1
    while (currcol<=currrow):
        print(currcol,end="")
        currcol+=1
    print()
    currrow+=1


Problem 3:

Code : Star Pattern
Send Feedback
Print the following pattern
Pattern for N = 4



The dots represent spaces.



Input Format :
N (Total no. of rows)
Output Format :
Pattern in N lines
Constraints :
0 <= N <= 50
Sample Input 1 :
3
Sample Output 1 :
   *
  *** 
 *****
Sample Input 2 :
4
Sample Output 2 :
    *
   *** 
  *****
 *******

Soln:

n = int(input())
currrow = 1
while (currrow <= n):
    currcol = 1
    spaces = 1
    currcol1=2
    while (spaces <= n - currrow):
        print(" ", end="")
        spaces += 1
    while (currcol <= currrow):
        print("*", end="")
        currcol += 1
    while (currcol1 <= currrow):
        print("*", end="")
        currcol1 += 1
    print()
    currrow += 1


Problem 4:

Code : Triangle of Numbers
Send Feedback
Print the following pattern for the given number of rows.
Pattern for N = 4



The dots represent spaces.



Input format :
Integer N (Total no. of rows)
Output format :
Pattern in N lines
Constraints :
0 <= N <= 50
Sample Input 1:
5
Sample Output 1:
           1
         232
       34543
     4567654
   567898765
Sample Input 2:
4
Sample Output 2:
           1
         232
       34543
     4567654

Soln:

n = int(input())
currrow = 1
currrow1 = 1
currrow2 = 1
while (currrow <= n):
    currcol = 1
    spaces = 1
    while (spaces <= n - currrow):
        print(" ", end="")
        spaces += 1
    while (currcol <= currrow):
        print(currrow1, end="")
        currrow1 += 1
        currcol +=1
    currcol=currrow1-2
    while (currcol>=currrow):
        print(currcol,end="")
        currrow2 += 1
        currcol -= 1
    print()
    currrow += 1
    currrow1 = currrow


Problem 5:

Code : Diamond of stars
Send Feedback
Print the following pattern for the given number of rows.
Note: N is always odd.


Pattern for N = 5



The dots represent spaces.



Input format :
N (Total no. of rows and can only be odd)
Output format :
Pattern in N lines
Constraints :
1 <= N <= 49
Sample Input 1:
5
Sample Output 1:
  *
 ***
*****
 ***
  *
Sample Input 2:
3
Sample Output 2:
  *
 ***
  *


Soln:

n = int(input())
currrow = 1
currrow1 = 1
currrow2 = 1
while (currrow <= n):
    currcol = 1
    spaces = 1
    while (spaces <= n - currrow):
        print(" ", end="")
        spaces += 1
    while (currcol <= currrow):
        print(currrow1, end="")
        currrow1 += 1
        currcol +=1
    currcol=currrow1-2
    while (currcol>=currrow):
        print(currcol,end="")
        currrow2 += 1
        currcol -= 1
    print()
    currrow += 1
    currrow1 = currrow


Problem 6:

Number Pattern
Send Feedback
Print the following pattern for n number of rows.
For eg. N = 5

1                1
12            21
123        321
1234    4321
1234554321
Sample Input 1 :
4
Sample Output 1 :
1            1
12        21
123    321
12344321

Soln:

n=int(input())
i=1
while(i<=n):
    j=1
    while(j<=i):
        print(j,end='')
        j=j+1
    spaces=1
    while(spaces<=2*(n-i)):
        print(' ',end='')
        spaces=spaces+1
    j=i
    while(j>=1):
        print(j,end="")
        j=j-1
    print()
    i=i+1


Problem 7:

Zeros and Stars Pattern
Send Feedback
Print the following pattern
Pattern for N = 4
*000*000*
0*00*00*0
00*0*0*00
000***000
Input Format :
N (Total no. of rows)
Output Format :
Pattern in N lines
Sample Input 1 :
3
Sample Output 1 :
*00*00*
0*0*0*0
00***00
Sample Input 2 :
5
Sample Output 2 :
*0000*0000*
0*000*000*0
00*00*00*00
000*0*0*000
0000***0000

Soln:

n=int(input())

i=1
while i<=n:
  j=1
  while j<=((2*n)+1):
    if j==i or j==(n+1) or ((n*2)+2)-i == j:
      print("*",end="")
    else:
      print("0", end="")
    j=j+1
  i=i+1
  print()

Problem 8:

Pyramid Number Pattern
Send Feedback
Print the following pattern for the given number of rows.
Pattern for N = 4
   1
  212
 32123
4321234
Input format : N (Total no. of rows)

Output format : Pattern in N lines

Sample Input :
5
Sample Output :
        1
      212
    32123
  4321234
543212345

Soln:

n=int(input())
i=1;cr=1;
while(i<=n):
    cr1 = 2
    j=1
    spaces = 1
    while (spaces <=(n - i)):
        print(' ', end='')
        spaces = spaces + 1
    while(cr>=j):
        print(cr,end='')
        cr=cr-1
    while cr1 <= i:
        print(cr1, end='')
        cr1 = cr1 + 1

    print()
    i=i+1
    cr=i

Problem 9:

Arrow pattern
Send Feedback
Print the following pattern for the given number of rows.
Assume N is always odd.
Note : There is space after every star.
Pattern for N = 7
*
 * *
   * * *
     * * * *
   * * *
 * *
*
Input format :
Integer N (Total no. of rows)
Output format :
Pattern in N lines
Sample Input :
11
Sample Output :
*
 * *
   * * *
     * * * *
       * * * * *
         * * * * * *
       * * * * *
     * * * *
   * * *
 * *
*

Soln:

n=int(input())
n1=(n+1)/2
n2=n1-1
i=1
while i<=n1:
    spaces=1
    while spaces<=(i-1):
        print(" ",end="")
        spaces=spaces+1
    j=1
    while j<=i:
        print("* ", end="")
        j=j+1
    print()
    i=i+1

k=1
while k<=n2:
    spaces=n2-k
    while spaces>0:
        print(" ",end="")
        spaces=spaces-1
    l=n2-k+1
    while l>0:
        print("* ",end="")
        l=l-1
    print()
    k=k+1   
